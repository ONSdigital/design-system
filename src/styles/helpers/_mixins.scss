@mixin rem($property, $values...) {
  $max: length($values);
  $px-values: '';
  $rem-values: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $px-values: #{$px-values + $value * 16}px;

    @if $i < $max {
      $px-values: #{$px-values + ' '};
    }
  }

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $rem-values: #{$rem-values + $value}rem;

    @if $i < $max {
      $rem-values: #{$rem-values + ' '};
    }
  }

  #{$property}: $px-values;
  #{$property}: $rem-values;
}

@mixin font-size($size-value: 1.6) {
  @include rem(font-size, $size-value);
}

@mixin inline-block-hack {
  @if ($responsive == false) {
    // *display: inline;
    zoom: 1;
  }
}
// =============================================================================
// String Replace
// =============================================================================
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}
// =============================================================================
// Font Face
// =============================================================================
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;
  $extmods: (
    eot: '?',
    svg: '#' + str-replace($name, ' ', '_')
  );
  $formats: (
    otf: 'opentype',
    ttf: 'truetype'
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url('#{$path}.#{$extmod}') format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}

@mixin clearfix() {
  // no-op
}
// =============================================================================
// Create icon
// =============================================================================

@mixin icon($name) {
  background-image: url('#{$static}/img/icons/icons--#{$name}.svg');
  background-repeat: no-repeat;
}

@mixin create-icon(
  $icon-name,
  $class-name: null,
  $hover-icon-name: null,
  $width: 1.3rem,
  $top: 2px,
  $position: left,
  $btn: false,
  $transform: null
) {
  $name: $icon-name;

  @if ($class-name != null) {
    $name: $class-name;
  }

  .icon--#{$name} {
    position: relative;
    @if ($position == 'right') {
      @if ($btn == true) {
        padding-right: $width * 1.8;
      } @else {
        padding-right: $width + 0.4rem;
      }
    } @else {
      @if ($btn == true) {
        padding-left: $width * 1.8;
      } @else {
        padding-left: $width + 0.4rem;
      }
    }

    &::before,
    &::after {
      content: '';
      display: inline-block;
      height: $width;
      width: $width;
      position: absolute;
      top: $top;
      left: 0;
      background-size: $width $width;
      background-repeat: no-repeat;
      transition: opacity 200ms ease-in-out, transform 300ms ease-in-out;
      background-position: 0 0;

      @if ($btn == true) {
        top: 0.7rem;
        left: $width - 0.5rem;
      }

      @if ($position == 'right') {
        left: auto;
        right: $width - 0.7rem;
      }

      @if ($transform) {
        transform: $transform;
      }
    }

    &::before {
      @include icon($icon-name);
    }

    @if ($hover-icon-name) {
      &::after {
        @include icon($hover-icon-name);
        opacity: 0;
      }
      &:hover,
      &:focus {
        &::before {
          opacity: 0;
        }
        &::after {
          opacity: 1;
        }
      }
    }
  }
}

// =============================================================================
// Remove nth-Child Padding
// =============================================================================

@mixin nth-element($num, $px) {
  &:nth-child(#{$num}) {
    padding-left: $px;
  }
}

// =============================================================================
// Sets antialiasing - used for light text on dark background
// =============================================================================
@mixin font-smoothing() {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}

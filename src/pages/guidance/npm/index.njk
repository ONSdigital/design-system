---
title: Installing the design system
sortOrder: 1
group: Getting started
anchorLinks: true
---

+++
{% from "components/external-link/_macro.njk" import onsExternalLink %}
{% from "components/code-highlight/_macro.njk" import onsCodeHighlight %}
+++

## Install with npm

The ONS Design System is available as an {{
    onsExternalLink({
        "url": "https://www.npmjs.com/package/@ons/design-system",
        "linkText": "npm package"
    })
}}. Every release is published to npm and provides a quick way to install everything you need.
Inside the package are the following:

- **components** – each component contains a macro file that can be used in a Nunjucks-compatible application
- **Sass files** – all Sass rules are available to import, either everything or specific parts like a single component or the Sass that controls layout
- **CSS files** – compiled CSS of all components and layout styles
- **JS files** – bundled JavaScript modules
- **fonts, images, favicons** – static assets used in components and templates
- **base [page template](/styles/page-template)** – a Nunjucks template that contains the core markup and components needed to create an ONS service

### Install the ONS Design System npm package

To do this you will need {{
    onsExternalLink({
        "url": "https://nodejs.org/en/",
        "linkText": "node.js"
    })
}} installed and a {{
    onsExternalLink({
        "url": "https://docs.npmjs.com/files/package.json",
        "linkText": "package.json"
    })
}} file in the root of your project.

Then run:

{{ onsCodeHighlight({ "code": 'npm install @ons/design-system' }) }}

This will install the latest version of `@ons/design-system` in your `node_modules` folder.

The next step is to get some [styles, scripts and other assets](/guidance/css-js-assets) working in your project.

## Using the CSS JS and assets

### CSS
#### How to import Sass files from the npm package

If your project has its own bundling tool you can import Sass rules from your `@ons/design-system` {{
    onsExternalLink({
        "url": "https://www.npmjs.com/package/@ons/design-system",
        "linkText": "npm package"
    })
}}.

##### How to import all Sass rules

You can get all the Sass rules by adding the following to your main Sass file:

{{ onsCodeHighlight({ "code": "@import 'node_modules/@ons/design-system/scss/main';" }) }}

##### How to import specific Sass rules

You may not need any or many of the CSS for components. For performance reasons, you may only want specific parts of the design system Sass files.

As a minimum, you should import the following Sass files:

{{ onsCodeHighlight({ "code": "@import 'node_modules/@ons/design-system/scss/vars/index';
@import 'node_modules/@ons/design-system/scss/helpers/index';
@import 'node_modules/@ons/design-system/scss/utilities/index';
@import 'node_modules/@ons/design-system/scss/base/index';
@import 'node_modules/@ons/design-system/scss/objects/index';" }) }}

Importing these files ensures components and patterns have access to any required global classes and utilities.

To import the styles for a single component, for example, the button component, you need to add this after the base Sass files:

{{ onsCodeHighlight({ "code": "@import 'node_modules/@ons/design-system/components/button/button';" }) }}

Some components use other components, for example, the accordion component uses the collapsible component. You need to import the Sass files for each component used.

#### How to use compiled CSS from the npm package

You can either import or copy the `main.css` file to include the compiled stylesheet of all components and styles. This file can be found under `node_modules/@ons/design-system/css/main.css`.

### Javascript
The best way to include the required JS in your service is to reference the published JS file from the [content delivery network (CDN)](#cdn). The design system uses {{
    onsExternalLink({
        "url": "https://webpack.js.org/guides/code-splitting/",
        "linkText": "code splitting"
    })
}} to optimise performance by dynamically importing modules only when they are required. The section below provides details on how to reference files from the CDN.

You can use the `main.js` from the design system npm package. You can copy the script files from `node_modules/@ons/design-system/scripts`
into a `/scripts` folder in your project. You could also set up routing on your service to point to the `/scripts` located in `node_modules/@ons/design-system`.

If you are using a bundler tool like webpack, you need to `import` all files from the npm package `scripts` folder.

### CDN
All the global styles and individual component code is compiled and made available via a CDN. Each release deployed to the CDN is always available. This allows services to plan upgrades to new versions.

Each release of the design system is tagged with a version, for example, ![](https://img.shields.io/github/release/onsdigital/design-system.svg?style=flat-square) which forms part of the URL of the compiled files for a specific release.

The following files are deployed to the CDN which can be referenced in a service or project:

- `main.css` - responsive CSS file of all components
- `main.js` - bundled JavaScript modules

If you are using the design system [base template](/styles/page-template/) (recommended) you will not need to reference any assets from the CDN. The release version is automatically applied in the base template to any references.

If you do need to reference the files in your service, use the following URL structures (the `[VERSION]` should be replaced with the required release version, for example  ![](https://img.shields.io/github/release/onsdigital/design-system.svg?style=flat-square)). Do not include the `v`, just include the number:

- `https://cdn.ons.gov.uk/sdc/design-system/[VERSION]/css/main.css`
- `https://cdn.ons.gov.uk/sdc/design-system/[VERSION]/scripts/main.js`

Note that some local development environments require you to override the global `ONS_assets_base_URL` variable to use the chunked JS files. To do this, add the following script before the reference to the main.js file:

{{ onsCodeHighlight({ "code": "<script>var ONS_assets_base_URL='https://cdn.ons.gov.uk/sdc/design-system/[VERSION]/';</script>" }) }}

### Assets

All assets are available through the CDN. If you choose to use the main CSS file via the CDN, all required fonts and images will be served from there.

#### Fonts 

If you import all or parts of the CSS from the npm package you will need to import fonts into your service. You can copy the font files from `node_modules/@ons/design-system/fonts`
into a `/fonts` folder in your project. You could also set up routing on your service to point to the `/fonts` folder that is served from `node_modules/@ons/design-system/fonts`.

#### Images

All of the main images used across the design system have been implemented as inline SVGs, so you may not need any of the images within the npm package or CDN. We do supply placeholder images for some components. If you require these, you can make them available by referencing directly from the CDN or following the same process as for including fonts and using a folder named `img`.

#### Favicons

There are favicons (or shortcut icons) for Safari, Chrome and Edge/Internet Explorer for desktop and mobile. Place the following references into the `head` of all pages within your service to make use of the available favicons. The `[VERSION]` should be replaced with the required release version.

{{ onsCodeHighlight({ "code": '<meta name="msapplication-config" content="https://cdn.ons.gov.uk/sdc/design-system/[VERSION]/favicons/browserconfig.json">
<link rel="icon" type="image/x-icon" href="/favicons/favicon.ico">
<link rel="icon" type="image/png" href="https://cdn.ons.gov.uk/sdc/design-system/[VERSION]/favicons/favicon-32x32.png" sizes="32x32">
<link rel="icon" type="image/png" href="https://cdn.ons.gov.uk/sdc/design-system/[VERSION]/favicons/favicon-16x16.png" sizes="16x16">
<link rel="mask-icon" color="#5bbad5" href="https://cdn.ons.gov.uk/sdc/design-system/[VERSION]/favicons/safari-pinned-tab.svg">
<link rel="apple-touch-icon" type="image/png" href="https://cdn.ons.gov.uk/sdc/design-system/[VERSION]/favicons/apple-touch-icon.png" sizes="180x180">
<link rel="manifest" href="https://cdn.ons.gov.uk/sdc/design-system/[VERSION]/favicons/manifest.json">'}) }}

Alternatively, you can copy the favicons from `node_modules/@ons/design-system/favicons` (if using the npm package) and referencing them from your project folder.

## Using Nunjucks
The ONS Design System uses {{
    onsExternalLink({
        "url": "https://mozilla.github.io/nunjucks/getting-started.html",
        "linkText": "Nunjucks"
    })
}} as its templating language. All components and templates are also compatible with applications that use {{
    onsExternalLink({
        "url": "https://jinja.palletsprojects.com/en/3.0.x/",
        "linkText": "Jinja"
    })
}}.

### How to set up Nunjucks

#### npm package
We recommend installing the design system through the {{
    onsExternalLink({
        "url": "https://www.npmjs.com/package/@ons/design-system",
        "linkText": "npm package"
    })
}} we publish on each release. 

In your Nunjucks configuration you'll need to add `node_modules/@ons/design-system/components` and `node_modules/@ons/design-system/page-templates` to your search paths.

#### Zip file
You can get all components and templates from a zip file that is created with each {{
    onsExternalLink({
        "url": "https://github.com/ONSdigital/design-system/releases",
        "linkText": "design system release"
    })
}}. You need to create a script that gets the zip and unpacks the contents. For development, the script could run manually, and the folders added to a `.gitignore` file. In production, it would need to be run within a build process as part of a continuous integration task.

If you are using Jinja, your script will need to copy the `components` and `layout` folders from the unzipped download into your `templates` folder. This is where Jinja looks for templates as multiple search paths cannot be specified.

The zipped templates have already got the content delivery network (CDN) release version and paths set based on the version of the templates you have downloaded.

### How to use Nunjucks with components

Each component contains examples and any context-specific variants. You can copy the Nunjucks code directly from the examples.

+++
{% from "views/partials/example/_macro.njk" import patternlibExample %}
{{
    patternlibExample({"path": "components/panel/examples/information/index.njk"})
}}
+++

## Compiled HTML

This approach is not recommended in production. We recommend you use [Nunjucks](/guidance/nunjucks) instead. By using Nunjucks, you can easily keep up to date with the latest versions of the design system. If you use compiled HTML for your service, upgrading to new versions will require careful, manual amendments to your code.

If you have to use compiled HTML, each component example has an HTML tab that shows the rendered HTML output. You can copy and paste the code into templates in your project.

You need to [reference the CSS and JS files from the CDN](/guidance/css-js-assets#cdn) to bring in the styles and interactivity for the components being used. 
